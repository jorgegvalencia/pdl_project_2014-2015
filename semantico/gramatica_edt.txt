	PROGRAMA0 -> PROGRAMAS  { if (PROGRAMAS.tipo = "ok") then SIN ERRORES; else ERROR }
	
	PROGRAMAS -> SALTO PROGRAMA { PROGRAMAS.tipo = PROGRAMA.tipo }
	
	PROGRAMA -> BLOQUE  { PROGRAMA.tipo = BLOQUE.tipo }
	PROGRAMA -> FUNCION { PROGRAMA.tipo = FUNCION.tipo }
	PROGRAMA -> BLOQUE  SALTO2  PROGRAMA  { if(BLOQUE.tipo = "ok") then PROGRAMA.tipo = PROGRAMA1.tipo; else PROGRAMA.tipo = "error" }
	PROGRAMA -> FUNCION  SALTO2  PROGRAMA  { if(FUNCION.tipo = "ok") then PROGRAMA.tipo = PROGRAMA1.tipo; else PROGRAMA.tipo = "error" }
	PROGRAMA -> lambda { PROGRAMA.tipo = "ok" }

	BLOQUE -> var  id  { BLOQUE.tipo = "ok" }
	BLOQUE -> SENTENCIA { BLOQUE.tipo = SENTENCIA.tipo }
	BLOQUE -> if  abrePar  EXPRESION  cierraPar  SENTENCIA  { if(EXPRESION.tipo = "entero/logico") then BLOQUE.tipo = SENTENCIA.tipo; else BLOQUE.tipo = "error" }
	BLOQUE -> if  abrePar  EXPRESION  cierraPar  SALTO  abreLlave  SALTO2  CUERPO  cierraLlave { if(EXPRESION.tipo = "entero/logico") then BLOQUE.tipo = CUERPO.tipo; else BLOQUE.tipo = "error" }
	BLOQUE -> switch  abrePar  EXPRESION  cierraPar  SALTO  abreLlave  SALTO2  CASE  cierraLlave { if(EXPRESION.tipo = "entero/logico") then BLOQUE.tipo = CASE.tipo; else BLOQUE.tipo = "error" }

	CASE -> default  dosPuntos SALTO CUERPO   { CASE.tipo = CUERPO.tipo }
	CASE -> case  EXPRESION  dosPuntos  SALTO CUERPO  CASE2  { if(EXPRESION.tipo = "entero/logico" && CUERPO.tipo = "ok" && CASE2.tipo="ok") then CASE.tipo = "ok"; else CASE.tipo = "error" }
	CASE2 -> CASE  { CASE2.tipo = CASE.tipo }
	CASE2 -> break  SALTO2  CASE  { CASE2.tipo = CASE.tipo }

	FUNCION -> function  id  abrePar  ARGUMENTOS  cierraPar SALTO abreLlave  SALTO2  CUERPO cierraLlave //{ if(ARGUMENTOS.tipo = "ok") then FUNCION.tipo = CUERPO.tipo; else FUNCION.tipo = "error"; Eliminar TS Local} 

	SENTENCIA -> id  igual  EXPRESION  {if(id.tipo!=funcion)then id.tipo = EXPRESION.tipo, SENTENCIA.tipo = "ok"; else SENTENCIA.tipo="error" }
	SENTENCIA -> id  masIgual  EXPRESION  { if (id.tipo = "entero/logico" && EXPRESION.tipo = "entero/logico") then SENTENCIA.tipo = "ok"; else SENTENCIA.tipo = "error" }
	SENTENCIA -> id  menosIgual  EXPRESION  { if (id.tipo = "entero/logico" && EXPRESION.tipo = "entero/logico") then SENTENCIA.tipo = "ok"; else SENTENCIA.tipo = "error" }
	SENTENCIA -> id  abrePar  LLAMADAFUN  cierraPar  { if(id.tipo = "funcion")then SENTENCIA.tipo = LLAMADAFUN.tipo; else SENTENCIA.tipo = "error" }
	SENTENCIA -> document  punto  write  abrePar  EXPRESION  cierraPar  { if (EXPRESION.tipo != "error") then SENTENCIA.tipo = "ok"; else SENTENCIA.tipo="error" }
	SENTENCIA -> prompt  abrePar  id  cierraPar  { if (id.tipo!=funcion)then SENTENCIA.tipo = "ok"; else SENTENCIA.tipo = "error" }
	SENTENCIA -> return  RETURNVALUE  { if(RETURNVALUE.tipo != "ok", "error", "vacio") then TSG.funcion.val_dev = RETURNVALUE.tipo, SENTENCIA.tipo = "ok"; else SENTENCIA.tipo = RETURNVALUE.tipo}

	CUERPO -> BLOQUE  SALTO2  CUERPO  { if (CUERPO1.tipo = "ok" && BLOQUE.tipo = "ok") then CUERPO.tipo = "ok"; else CUERPO.tipo = "error"}
	CUERPO -> lambda { CUERPO.tipo = "ok" }

	SALTO -> sl SALTO
	SALTO -> lambda

	SALTO2 -> sl SALTO

	RETURNVALUE -> EXPRESION  { RETURNVALUE.tipo = EXPRESION.tipo }
	RETURNVALUE -> lambda { RETURNVALUE.tipo = "vacio" }

	LLAMADAFUN -> EXPRESION  LLAMADAFUN2 { if(EXPRESION.tipo = "ok" && LLAMADAFUN2.tipo="ok") then LLAMADAFUN.tipo = "ok"; else LLAMADAFUN.tipo = "error"}
	LLAMADAFUN -> lambda { LLAMADAFUN.tipo = "ok" }

	LLAMADAFUN2 -> coma  EXPRESION  LLAMADAFUN2 { if(EXPRESION.tipo != "error","vacio")then LLAMADAFUN2.tipo = LLAMADAFUN21.tipo; else LLAMADAFUN2.tipo = "error"}
	LLAMADAFUN2 -> lambda { LLAMADAFUN2.tipo = "ok" }

	ARGUMENTOS -> id  ARGUMENTOS2 { ARGUMENTOS.tipo = ARGUMENTOS2.tipo }
	ARGUMENTOS -> lambda { ARGUMENTOS.tipo = "ok" }
	ARGUMENTOS2 -> coma  id  ARGUMENTOS21  { ARGUMENTOS2.tipo = ARGUMENTOS21.tipo }
	ARGUMENTOS2 -> lambda { ARGUMENTOS2.tipo = "ok" }

	EXPRESION -> EXPRESION  menor  ARITMETICA { if(EXPRESION1.tipo = entero/logico && ARITMETICA.tipo = entero/logico) then EXPRESION.tipo = entero/logico else EXPRESION.tipo = "error" }
	EXPRESION -> EXPRESION1  menorIgual  ARITMETICA { if(EXPRESION1.tipo = entero/logico && ARITMETICA.tipo = entero/logico) then EXPRESION.tipo = entero/logico else EXPRESION.tipo = "error" }
	EXPRESION -> ARITMETICA  { EXPRESION.tipo = ARITMETICA.tipo }

	ARITMETICA -> ARITMETICA1  mas  SIMPLE  { if(ARITMETICA1.tipo = entero/logico && SIMPLE.tipo = entero/logico) then ARITMETICA.tipo = entero/logico else ARITMETICA.tipo = "error" }
	ARITMETICA -> ARITMETICA1  menos  SIMPLE  { if(ARITMETICA1.tipo = entero/logico && SIMPLE.tipo = entero/logico) then ARITMETICA.tipo = entero/logico else ARITMETICA.tipo = "error" }
	ARITMETICA -> SIMPLE  { ARITMETICA.tipo = SIMPLE.tipo }

	SIMPLE -> negacion  SIMPLE1 { if(SIMPLE1.tipo = entero/logico) then SIMPLE.tipo = entero/logico; else SIMPLE.tipo = "error" } 
	SIMPLE -> abrePar  EXPRESION  cierraPar  { SIMPLE.tipo = EXPRESION.tipo }
	SIMPLE -> id { SIMPLE.tipo = buscaTipoTS(id.ent) }
	SIMPLE -> num  { SIMPLE.tipo = entero/logico }
	SIMPLE -> cad  { SIMPLE.tipo = cadena }
	SIMPLE -> id  abrePar  LLAMADAFUN  cierraPar  { if(LLAMADAFUN.tipo = "ok" && id.tipo = "funcion") then SIMPLE.tipo = id.tipoDevuelto; else SIMPLE.tipo = "error"}